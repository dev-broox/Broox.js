# Broox library

This is JavaScript API Reference for broox.js library.

## {@link mediaPlayer | Media Player}

Provides context to the apps executed within the Media Player.

#### Usage
<br/>

``` typescript
import { BlobsController, getMediaInfo } from './brooxMediaPlayer.js';
```
<br/>

 #### {@link BlobsController}
 
 Parses tuio events recieved by apps and keeps track of the blobs.

  ``` typescript
 // example
 const blobsController = new BlobsController(width, height, false, () => {...);
 const skeletons = blobsController.getSkeletons();
 ```
 <br/>

#### {@link KeyValue}

Allows apps to persist json values associated to a project and a key.

``` typescript
// example
const user = {
  firstName: 'John',
  lastName: 'Doe'
};
const keyValue = new KeyValue();
keyValue.set('testApp', 'profile', user);
const profile = keyValue.get('testApp', 'profile');
```
<br/>

#### {@link GestureHandler}

Parses OSC events recieved by apps and allows to handle the different gestures.

``` typescript
// example
const gestureHandler = new GestureHandler(500, 2);
gestureHandler.onPresence(() => console.log('Presence'));
```
<br/>

#### {@link OscListener}

Listens to OSC events and executes callback functions.

``` typescript
// example
const oscListener = new OscListener();
oscListener.add('/start', () => console.log('Start'));
```
<br/>

#### Functions
- {@link getMediaInfo}
  <br/>
  Gets media information.
- {@link getDeviceInfo}
  <br/>
  Gets device information.
- {@link logAlarm}
  <br/>
  Logs an alarm.
<br/>
 
## {@link media | Media}

Provides classes and functions related to the rendering process of different media.

#### Usage
<br/>

``` typescript
import { Composition, startDevice } from './brooxMedia.js';
```
<br/>

#### {@link Composition}

Allows to create an image based on many media objects (images, videos, etc.).

``` typescript
// example
const composition = new Composition(width, height, borderWidth);
composition.addElement(webcam, 0, 0, webcam.videoWidth, webcam.videoHeight, 1, false);
composition.get().then(blob => {
   image.src = URL.createObjectURL(blob);
)};
```
<br/>

 ``` typescript
 // example
 const recorder = new Recorder(stream);
 recorder.start();
 setTimeout(() => {
   recorder.stop().then(blob => {
     console.log(blob);
   )};
 }, 10000);
 ```
 <br/>

#### Functions
- {@link getAvailableDevices}
  <br/>
  Gets navigator media devices.
- {@link getDeviceId}
  <br/>
  Gets navigator device id.
- {@link startDevice}
  <br/>
  Starts a given device (user media).
- {@link drawElement}
  <br/>
  Renders an element in a given 2d context.
- {@link drawVideo}
  <br/>
  Renders a video in a given 2d context.
- {@link blobToImage}
  <br/>
  Converts a blob to an image.
<br/>

## {@link logger | Logger}

Provides logging options.

#### Usage
<br/>

``` typescript
import { LogController } from './brooxLogger.js';
```
<br/>

 #### {@link LogController}
 
 Enables or disables logs to console.

  ``` typescript
 // example
 const logController = new LogController(true, () => {...);
 console.log(message);
 ```
<br/>

## {@link visionNode | Vision Node}

Provides context to communicate with Vision Node.
#### Usage

``` typescript
import { SkeletonController } from './brooxVisionNode.js';
```
<br/>

#### {@link SkeletonController}

Parses MQTT events sent by Vision Node and keeps track of the skeletons.

``` typescript
// example
const skeletonController = new SkeletonController(width, height, () => {...);
const skeletons = blobsController.getSkeletons();
```
<br/>

#### {@link GestureHandler}

Parses MQTT events sent by Vision Node and allows to handle the different gestures.

``` typescript
// example
const gestureHandler = new GestureHandler(500, 2);
gestureHandler.onPresence(() => console.log('Presence'));
```
<br/>

#### {@link KeyValue}

Allows apps to persist json values associated to a project and a key.

``` typescript
// example
const user = {
  firstName: 'John',
  lastName: 'Doe'
};
const keyValue = new KeyValue();
keyValue.set('testApp', 'profile', user);
const profile = keyValue.get('testApp', 'profile');
```
<br/>

#### {@link MqttClient}

MQTT client.

``` typescript
// example
const client = new MqttClient('localhost', 1884);
client.onMessage(() => console.log(message));
```
<br/>