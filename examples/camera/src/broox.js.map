{"mappings":"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","sources":["src/modules/media/Media.module.ts","src/modules/media/Context.ts","src/modules/media/Stream.ts","src/Message.ts","src/modules/media/Blob.ts","src/modules/media/Composition.ts","src/modules/media/Recorder.ts"],"sourcesContent":["/**\r\n * Provides classes and functions related to the rendering process of different media.\r\n *\r\n * #### {@link Composition}\r\n *\r\n * Allows to create an image based on many media objects (images, videos, etc.).\r\n *\r\n * ``` typescript\r\n * // example\r\n * const composition = new broox.media.Composition(width, height, borderWidth);\r\n * composition.addElement(webcam, 0, 0, webcam.videoWidth, webcam.videoHeight, 1, false);\r\n * composition.get().then(blob => {\r\n *    image.src = URL.createObjectURL(blob);\r\n * )};\r\n * ```\r\n * <br/>\r\n * Allows to record a stream.\r\n *\r\n * ``` typescript\r\n * // example\r\n * const recorder = new broox.media.Recorder(stream);\r\n * recorder.start();\r\n * setTimeout(() => {\r\n *   recorder.stop().then(blob => {\r\n *     console.log(blob);\r\n *   )};\r\n * }, 10000);\r\n * ```\r\n * <br/>\r\n *\r\n * #### Functions\r\n * - {@link getAvailableDevices}\r\n *   <br/>\r\n *   Gets navigator media devices.\r\n * - {@link getDeviceId}\r\n *   <br/>\r\n *   Gets navigator device id.\r\n * - {@link startDevice}\r\n *   <br/>\r\n *   Starts a given device (user media).\r\n * - {@link drawElement}\r\n *   <br/>\r\n *   Renders an element in a given 2d context.\r\n * - {@link drawPartOfElement}\r\n *   <br/>\r\n *   Renders a part of an element in a given 2d context.\r\n * - {@link drawVideo}\r\n *   <br/>\r\n *   Renders a video in a given 2d context.\r\n* - {@link blobToImage}\r\n *   <br/>\r\n *   Converts a blob to an image.\r\n * \r\n * @module media\r\n */\r\nexport { drawElement, drawPartOfElement, drawVideo } from './Context';\r\nexport { getAvailableDevices, getDeviceId, startDevice } from './Stream';\r\nexport { blobToImage } from './Blob';\r\nexport { Composition } from './Composition';\r\nexport { Recorder } from './Recorder';","/**\r\n * Renders a video element in the given 2d context.\r\n * @param video Video to draw in context.\r\n * @param context 2d context.\r\n * @param destinationWidth Destination width.\r\n * @param destinationHeight Destination height.\r\n * @param destinationX Destination x position.\r\n * @param destinationY Destination y position.\r\n * @param mirror Value indicating whether to mirror the image before.\r\n * ``` typescript\r\n * // example\r\n * const canvas = document.createElement('canvas');\r\n * canvas.width = width;\r\n * canvas.height = height;\r\n * const context = canvas.getContext('2d');\r\n * const video = document.getElementById('video')\r\n * broox.media.drawElement(video, context, width, height, 0, 0, false);\r\n * ```\r\n */\r\nexport const drawVideo = (video: HTMLVideoElement, context: CanvasRenderingContext2D, destinationWidth: number, destinationHeight: number, destinationX: number, destinationY: number, mirror = false) => {\r\n  drawElement(video, context, video.videoWidth, video.videoHeight, destinationWidth, destinationHeight, destinationX, destinationY, mirror);\r\n}\r\n\r\n/**\r\n * Renders an element in the given 2d context.\r\n * @param element Element to draw in context.\r\n * @param context 2d context.\r\n * @param sourceWidth Source width.\r\n * @param sourceHeight Source height.\r\n * @param destinationWidth Destination width.\r\n * @param destinationHeight Destination height.\r\n * @param destinationX Destination x position.\r\n * @param destinationY Destination y position.\r\n * @param mirror Value indicating whether to mirror the image before.\r\n * ``` typescript\r\n * // example\r\n * const canvas = document.createElement('canvas');\r\n * canvas.width = width;\r\n * canvas.height = height;\r\n * const context = canvas.getContext('2d');\r\n * const element = document.getElementById('img')\r\n * broox.media.drawElement(element, context, element.width, element.height, width, height, 0, 0, false);\r\n * ```\r\n */\r\nexport const drawElement = (element: CanvasImageSource, context: CanvasRenderingContext2D, sourceWidth: number, sourceHeight: number, destinationWidth: number, destinationHeight: number, destinationX: number, destinationY: number, mirror = false) => {\r\n  drawPartOfElement(element, context, false, sourceWidth, sourceHeight, 0, 0, destinationWidth, destinationHeight, destinationX, destinationY, mirror);\r\n}\r\n\r\n/**\r\n * Renders an element in the given 2d context.\r\n * @param element Element to draw in context.\r\n * @param context 2d context.\r\n * @param sourceWidth Source width.\r\n * @param sourceHeight Source height.\r\n * @param sourceX Source x position.\r\n * @param sourceY Source y position.\r\n * @param destinationWidth Destination width.\r\n * @param destinationHeight Destination height.\r\n * @param destinationX Destination x position.\r\n * @param destinationY Destination y position.\r\n * @param mirror Value indicating whether to mirror the image before.\r\n * ``` typescript\r\n * // example\r\n * const canvas = document.createElement('canvas');\r\n * canvas.width = width;\r\n * canvas.height = height;\r\n * const context = canvas.getContext('2d');\r\n * const element = document.getElementById('img')\r\n * broox.media.drawPartOfElement(element, context, false, element.width, element.height, 0, 0, width, height, 0, 0, false);\r\n * ```\r\n */\r\n export const drawPartOfElement = (element: CanvasImageSource, context: CanvasRenderingContext2D, cutToScale: boolean, sourceWidth: number, sourceHeight: number, sourceX: number, sourceY: number, destinationWidth: number, destinationHeight: number, destinationX: number, destinationY: number, mirror = false) => {\r\n  // get ratios\r\n  const horizontalRatio = Math.round((destinationWidth / sourceWidth) * 100) / 100;\r\n  const verticalRatio = Math.round((destinationHeight / sourceHeight) * 100) / 100;\r\n  let height = 0;\r\n  let width = 0;\r\n  let leftOffset = 0;\r\n  let topOffset = 0;\r\n  // take center of element vertically or horizontally depending on ratio\r\n  if(verticalRatio === horizontalRatio) {\r\n    width = sourceWidth;\r\n    height = sourceHeight;\r\n    leftOffset = 0;\r\n    topOffset = 0;\r\n  }\r\n  else if((verticalRatio > horizontalRatio && cutToScale) || (verticalRatio < horizontalRatio && !cutToScale)) {\r\n    height = sourceHeight;\r\n    width = destinationWidth / verticalRatio;\r\n    leftOffset = (sourceWidth - width) / 2;\r\n  }\r\n  else {\r\n    width = sourceWidth;\r\n    height = destinationHeight / horizontalRatio;\r\n    topOffset = (sourceHeight - height) / 2;\r\n  }\r\n  if(mirror) {\r\n    context.scale(-1, 1);\r\n    context.drawImage(element, sourceX + leftOffset, sourceY + topOffset, width, height, -destinationX, destinationY, -destinationWidth, destinationHeight);\r\n  }\r\n  else {\r\n    context.drawImage(element, sourceX + leftOffset, sourceY + topOffset, width, height, destinationX, destinationY, destinationWidth, destinationHeight);\r\n  }\r\n}","import Message from '../../Message';\r\n\r\n/**\r\n * Gets all available devices.\r\n * @returns Promise with list of available devices.\r\n * ``` typescript\r\n * // example\r\n * broox.media.getAvailableDevices().then(devices => {});\r\n * ```\r\n */\r\nexport const getAvailableDevices = (): Promise<any[]> => {\r\n  return new Promise((resolve, reject) => {\r\n    navigator.mediaDevices.enumerateDevices()\r\n      .then(devices => {\r\n        const result = devices.map(d => {\r\n          return {\r\n            id: d.deviceId,\r\n            name: d.label\r\n          }\r\n        });\r\n        resolve(result);\r\n      })\r\n      .catch(error => {\r\n        reject(error.message);\r\n      })\r\n  });\r\n}\r\n\r\n/**\r\n * Gets the id for the given device name.\r\n * @param name Device name.\r\n * @returns Promise with device id if found. Error otherwise.\r\n * ``` typescript\r\n * // example\r\n * broox.media.getDeviceId('OBS Virtual Camera').then(id => {\r\n *   broox.media.start(id, 1080, 1920).then(stream => {});\r\n * });\r\n * ```\r\n */\r\nexport const getDeviceId = (name: string): Promise<string> => {\r\n  return new Promise((resolve, reject) => {\r\n    navigator.mediaDevices.enumerateDevices()\r\n      .then(devices => {\r\n        for(let i = 0; i < devices.length; i++) {\r\n          if(devices[i].label === name) {\r\n            resolve(devices[i].deviceId);\r\n            return;\r\n          }\r\n        }\r\n        reject(Message.deviceNotFound);\r\n      })\r\n      .catch(error => {\r\n        reject(error.message);\r\n      })\r\n  });\r\n}\r\n\r\n/**\r\n * Starts the media stream.\r\n * @param deviceId Webcam identifier.\r\n * @param width Webcam width.\r\n * @param height Webcam height.\r\n * @returns MediaStream object to display webcam content.\r\n * ``` typescript\r\n * // example\r\n * broox.media.getDeviceId('OBS Virtual Camera').then(id => {\r\n *   broox.media.start(id, 1080, 1920).then(stream => {});\r\n * });\r\n * ```\r\n */\r\nexport const startDevice = (deviceId: string, width: number, height: number): Promise<MediaStream> => {\r\n  return navigator.mediaDevices.getUserMedia({ video: { deviceId: deviceId, width: width, height: height }});\r\n}","enum Message {\r\n  deviceNotFound = 'Device not found',\r\n  forbiddenProjectName = 'Please use a different project name'\r\n}\r\n\r\nexport default Message;","/**\r\n * Converts a blob to an image.\r\n * @returns Promise with the resulting image.\r\n * ``` typescript\r\n * // example\r\n * broox.media.blobToImage(blobg).then(image => {});\r\n * ```\r\n */\r\n export const blobToImage = (blob: Blob) => {\r\n  return new Promise((resolve) => {\r\n    const image = new Image();\r\n    image.onload = () => {\r\n      URL.revokeObjectURL(image.src);\r\n      resolve(image);\r\n    }\r\n    image.src = URL.createObjectURL(blob);\r\n  });\r\n}","import { drawElement } from './Context';\r\n\r\n/**\r\n * Generates images composition based on different elements.\r\n * ``` typescript\r\n * // example\r\n * const composition = new broox.media.Composition(width, height, borderWidth);\r\n * composition.addElement(webcam, 0, 0, webcam.videoWidth, webcam.videoHeight, 1, false);\r\n * composition.get().then(blob => {\r\n *   image.src = URL.createObjectURL(blob);\r\n * )};\r\n * ```\r\n */\r\nexport class Composition {\r\n  private canvas: HTMLCanvasElement;\r\n  private context: CanvasRenderingContext2D;\r\n  private scale: number;\r\n  private borderWidth: number;\r\n\r\n  /**\r\n   * Generates an instance of the Composition class.\r\n   * @param width Composition width.\r\n   * @param height Composition height.\r\n   * @param borderWidth Border width.\r\n   */\r\n  constructor(width: number, height: number, borderWidth: number) {\r\n    this.borderWidth = borderWidth;\r\n    this.canvas = document.createElement('canvas');\r\n    this.scale = (width - this.borderWidth * 2) / width;\r\n    this.canvas.width = width;\r\n    this.canvas.height = height * this.scale + this.borderWidth * 2;\r\n    this.context = this.canvas.getContext('2d');\r\n    this.context.fillStyle = 'white';\r\n    this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n  }\r\n\r\n  /**\r\n   * Adds an element to the composition.\r\n   * @param element Element to add.\r\n   * @param x Element X position.\r\n   * @param y Element Y position.\r\n   * @param width Element width.\r\n   * @param height Element height.\r\n   * @param scale Element scale.\r\n   * @param mirror Value indicating whether to mirror the image.\r\n   * ``` typescript\r\n   * // example\r\n   * const composition = new broox.media.Composition(width, height, borderWidth);\r\n   * composition.addElement(webcam, 0, 0, webcam.videoWidth, webcam.videoHeight, 1, false);\r\n   * composition.addElement(image, 0, 0, image.width, image.height, 1, false);\r\n   * ```\r\n   */\r\n  addElement(element: any, x: number, y: number, width: number, height: number, scale: number, mirror: boolean) {\r\n    const destinationWidth = width * this.scale * scale;\r\n    const destinationHeight = height * this.scale * scale;\r\n    const destinationX = this.borderWidth + x * scale * this.scale;\r\n    const destinationY = this.borderWidth + y * scale * this.scale;\r\n    drawElement(element, this.context, width, height, destinationWidth, destinationHeight, destinationX, destinationY, mirror);\r\n  }\r\n\r\n  /**\r\n   * Clears the composition.\r\n   */\r\n  clear() {\r\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n  }\r\n\r\n  /**\r\n   * Gets the resulting composition.\r\n   * @returns A promise with a blob containing the composition.\r\n   * ``` typescript\r\n   * // example\r\n   * composition.get().then(blob => {\r\n   *   image.src = URL.createObjectURL(blob);\r\n   * )};\r\n   * ```\r\n   */\r\n  get(): Promise<Blob> {\r\n    return new Promise((resolve) => {\r\n      this.canvas.toBlob(blob => resolve(blob), 'image/jpeg', 1);\r\n    });\r\n  }\r\n}","/**\r\n * Creates a video based on a stream.\r\n * ``` typescript\r\n * // example\r\n * const recorder = new broox.media.Recorder(stream);\r\n * recorder.start();\r\n * setTimeout(() => {\r\n *   recorder.stop().then(blob => {\r\n *     console.log(blob);\r\n *   )};\r\n * }, 10000);\r\n * ```\r\n */\r\nexport class Recorder {\r\n  private stream: MediaStream;\r\n  private recorder: MediaRecorder;\r\n  private promise: Promise<Blob>;\r\n  private resolve: (value: Blob | PromiseLike<Blob>) => void;\r\n\r\n  /**\r\n   * Creates an instance of the Recorder class. \r\n   */\r\n  constructor();\r\n  /**\r\n   * Creates an instance of the Recorder class.\r\n   * @param stream Stream to record.\r\n   */\r\n  constructor(stream: MediaStream);\r\n  constructor(stream?: MediaStream) {\r\n    this.stream = stream;\r\n  }\r\n\r\n  /**\r\n   * Sets a stream to record.\r\n   * @param stream Stream to record.\r\n   */\r\n  setStream(stream: MediaStream) {\r\n    this.stream = stream;\r\n  }\r\n\r\n  /**\r\n   * Starts recording.\r\n   */\r\n  start(options: MediaRecorderOptions) {\r\n    const self = this;\r\n    this.promise = new Promise((resolve, reject) => {\r\n      self.resolve = resolve;\r\n    });\r\n    let data = [];\r\n    this.recorder = new MediaRecorder(this.stream, options || {});\r\n    this.recorder.ondataavailable = e => data.push(e.data);\r\n    this.recorder.onstop = () => {\r\n      self.resolve(new Blob(data, { type: 'video/webm' }));\r\n    };\r\n    this.recorder.start();\r\n  }\r\n\r\n  /**\r\n   * Stops recording.\r\n   */\r\n  stop(): Promise<Blob> {\r\n    this.recorder.state === 'recording' && this.recorder.stop();\r\n    return this.promise;\r\n  }\r\n}"],"names":[],"version":3,"file":"broox.js.map"}